// <auto-generated /> - Indicates that this file is generated automatically by Entity Framework Core
// during migration operations. Changes made here will be overwritten if regenerated.

using System;                                     // Provides basic system types (e.g., DateTime)
using Microsoft.EntityFrameworkCore;              // Provides core functionality for EF Core
using Microsoft.EntityFrameworkCore.Infrastructure; // Infrastructure-related services for EF Core
using Microsoft.EntityFrameworkCore.Storage.ValueConversion; // Allows for type conversion in EF Core
using TodoApi.Data;                               // Namespace where the TodoContext is defined

#nullable disable // Disables nullable context warnings, typically used in generated code

namespace TodoApi.Migrations                       // Defines the namespace for migration files
{
    // Specifies that this snapshot is for the TodoContext class
    [DbContext(typeof(TodoContext))]
    partial class TodoContextModelSnapshot : ModelSnapshot
    {
        // The BuildModel method constructs the current model's schema in code form.
        protected override void BuildModel(ModelBuilder modelBuilder)
            // WHEN THE REFERENCE IS NOT CLICKABLE, IT IS PART OF SOME LIBRARY, CHECK MICROSOFT DOCUMENTATION FOR INFO
        {
#pragma warning disable 612, 618
            // Sets the EF Core product version annotation
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            // Configures the TodoItem entity based on the TodoItem class in TodoApi.Models
            modelBuilder.Entity("TodoApi.Models.TodoItem", b =>
            {
                // Configures the Id property as the primary key, auto-incremented
                b.Property<int>("Id")                    // Defines Id as an integer
                    .ValueGeneratedOnAdd()               // Specifies that Id is auto-generated
                    .HasColumnType("INTEGER");           // Maps Id to the INTEGER type in SQLite

                // Configures the DueDate property as a nullable DateTime (optional)
                b.Property<DateTime?>("DueDate")         // DueDate can be null
                    .HasColumnType("TEXT");              // Maps DueDate to TEXT in SQLite (used for dates)

                // Configures the IsCompleted property as a boolean
                b.Property<bool>("IsCompleted")          // Defines IsCompleted as a boolean
                    .HasColumnType("INTEGER");           // Maps boolean as INTEGER in SQLite (1=true, 0=false)

                // Configures the Name property as a required string
                b.Property<string>("Name")               // Defines Name as a string
                    .IsRequired()                        // Name cannot be null (required)
                    .HasColumnType("TEXT");              // Maps Name to TEXT in SQLite

                // Configures the primary key of the table to be the Id column
                b.HasKey("Id");

                // Maps this entity to the TodoItems table in the SQLite database
                b.ToTable("TodoItems");
            });
#pragma warning restore 612, 618
        }
    }
}
